# -*- coding: UTF-8 -*-
r"""
@time : 2022/6/27 11:23
@Author ：tz
@File ：K-means.py
@Description: 这个是一个两个特征的聚类。
"""
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap
from sklearn.cluster import KMeans  # 加载Kmeans算法

# 定义聚多少类
cluster = 10

# 定义颜色
colors1 = ['#FAEBD7', '#98F5FF', '#E6E6FA', '#7FFFD4', '#87CEEB',
           '#FFF68F', '#FFFF00', '#FFFF00', '#FFFF00', '#FFD39B',
           '#BA55D3', '#BA55D3', '#CDC5BF', '#FFF0F5', '#836FFF',
           '#FF83FA', '#FF83FA', '#A4D3EE', '#90EE90', '#90EE90',
           '#E066FF', '#3A5FCD',
           ]

colors2 = ["#466791", "#bd5975", "#4fbe6c", "#895c8b", "#ce49d3",
           "#a7b43d", "#5a51dc", "#d49f36", "#552095", "#507f2d",
           "#db37aa", "#84b67c", "#a06fda", "#df462a", "#5b83db",
           "#c76c2d", "#4f49a3", "#82702d", "#dd6bbb", "#334c22",
           "#d83979", "#55baad", "#dc4555", "#62aad3", "#8c3025",
           "#417d61", "#862977", "#bba672", "#403367", "#da8a6d",
           "#a79cd4", "#71482c", "#c689d0", "#6b2940", "#d593a7",
           "#60bf37", "#953ada"
           ]



r"""
产生数据，对于两个特征的数据使用形式为：
    X = np.array([
        [x_1, y_1],
        [x_2, y_2],
            .
            .
            .
        [x_n, y_n]
    ])
"""

X = np.array(
    [[299, 460], [523, 419], [874, 564], [89, 77], [77, 104], [617, 377], [49, 115], [904, 180], [865, 480], [675, 740],
     [96, 106], [124, 85], [62, 103], [69, 98], [77, 94], [473, 330], [653, 896], [355, 392], [163, 466], [499, 424],
     [242, 279], [516, 488], [476, 371], [104, 93], [656, 436], [788, 797], [44, 98], [118, 55], [92, 102], [692, 90],
     [518, 153], [275, 299], [403, 638], [251, 533], [98, 49], [501, 772], [364, 352], [512, 530], [555, 258],
     [778, 925], [197, 286], [989, 736], [346, 389], [421, 438], [560, 269], [84, 92], [293, 322], [595, 366],
     [153, 121], [393, 530], [105, 71], [732, 253], [976, 578], [407, 412], [971, 576], [687, 506], [893, 617],
     [789, 524], [894, 750], [1011, 819], [202, 294], [189, 276], [66, 133], [692, 773], [111, 133], [55, 111],
     [443, 335], [638, 725], [231, 411], [88, 97], [88, 117], [375, 563], [388, 201], [326, 345], [513, 540], [73, 122],
     [391, 454], [83, 99], [827, 802], [273, 237], [595, 495], [343, 390], [585, 269], [676, 762], [291, 490],
     [347, 347], [637, 300], [697, 671], [746, 806], [333, 303], [619, 451], [529, 708], [108, 92], [57, 117],
     [99, 132], [166, 259], [75, 95], [85, 111], [385, 331], [912, 974], [300, 240], [420, 511], [70, 137], [983, 701],
     [178, 314], [387, 317], [605, 338], [1007, 170], [871, 823], [326, 350], [606, 584], [86, 108], [95, 74],
     [179, 242], [821, 1026], [103, 64], [123, 153], [92, 162], [72, 65], [340, 498], [229, 313], [486, 321],
     [847, 537], [944, 533], [56, 123], [348, 538], [296, 449], [657, 237], [91, 111], [385, 395], [796, 285],
     [896, 783], [320, 561], [657, 613], [36, 111], [534, 342], [396, 667], [546, 494], [300, 476], [371, 175],
     [583, 472], [790, 806], [508, 563], [406, 102], [672, 790], [742, 770], [846, 860], [386, 437], [657, 465],
     [347, 340], [614, 253], [81, 98], [114, 86], [74, 106], [382, 403], [528, 303], [316, 481], [628, 428],
     [1309, 831], [936, 874], [891, 889], [841, 234], [842, 870], [824, 836], [43, 123], [95, 130], [330, 307],
     [104, 69], [347, 602], [938, 754], [525, 330], [555, 740], [783, 595], [712, 618], [968, 581], [665, 480],
     [874, 782], [618, 318], [93, 74], [532, 838], [777, 762], [971, 611], [91, 111], [551, 293], [391, 362],
     [269, 329], [790, 709], [969, 727], [157, 66], [69, 112], [563, 404], [310, 448], [51, 102], [108, 53], [121, 88],
     [55, 129], [306, 559], [366, 437], [831, 865], [89, 70], [91, 29], [857, 690], [463, 348], [718, 747], [526, 357],
     [105, 67], [171, 78], [103, 64], [388, 372], [480, 346], [130, 62], [499, 340], [332, 491], [417, 151], [321, 388],
     [51, 132], [117, 55], [579, 341], [542, 317], [676, 295], [778, 332], [700, 542], [199, 287], [116, 101],
     [223, 248], [110, 55], [334, 195], [61, 108], [769, 760], [138, 71], [82, 133], [540, 346], [805, 716], [52, 109],
     [701, 824], [300, 296], [331, 426], [526, 446], [605, 633], [86, 105], [101, 117], [83, 105], [280, 458], [72, 33],
     [84, 92], [359, 461], [533, 778], [711, 648], [943, 802], [1235, 735], [733, 781], [635, 609], [647, 717],
     [53, 124], [421, 296], [277, 454], [760, 602], [722, 691], [396, 183], [479, 272], [419, 431], [414, 559],
     [859, 816], [94, 74], [104, 76], [119, 85], [59, 106], [544, 587], [89, 75], [732, 935], [356, 488], [573, 467],
     [855, 598], [159, 66], [114, 87], [187, 391], [871, 287], [92, 71], [303, 329], [491, 166], [640, 846], [34, 91],
     [76, 105], [268, 264], [305, 331], [773, 607], [370, 373], [361, 481], [84, 102], [548, 250], [81, 83], [381, 209],
     [604, 326], [105, 67], [899, 969], [471, 594], [469, 477], [503, 536], [866, 987], [866, 483], [927, 777],
     [898, 306], [590, 240], [417, 467], [290, 437], [697, 331], [576, 458], [111, 83], [766, 597], [277, 296],
     [118, 87], [216, 209], [117, 90], [98, 121], [290, 391], [876, 847], [179, 303], [243, 453], [52, 118], [420, 209],
     [79, 102], [756, 802], [325, 378], [289, 456], [96, 26], [104, 53], [742, 1116], [292, 354], [83, 92], [853, 393],
     [382, 494], [640, 510], [839, 783], [393, 318], [614, 416], [111, 69], [75, 130], [377, 479], [514, 465],
     [108, 69], [66, 134], [78, 73], [325, 161], [862, 825], [349, 312], [601, 276], [104, 123], [689, 801], [425, 291],
     [946, 599], [744, 469], [400, 129], [692, 267], [244, 346], [102, 45], [767, 710], [254, 499], [569, 458],
     [237, 440], [269, 506], [660, 727], [772, 844], [978, 1194], [797, 649], [782, 671], [275, 235], [305, 84],
     [547, 359], [397, 409], [982, 813], [310, 326], [328, 311], [444, 356], [106, 85], [102, 99], [357, 430],
     [127, 133], [150, 71], [104, 121], [249, 694], [104, 66], [460, 214], [202, 422], [109, 122], [464, 171],
     [329, 459], [331, 457], [203, 369], [122, 86], [327, 407], [190, 300], [642, 721], [570, 684], [431, 270],
     [53, 125], [126, 94], [625, 357], [584, 246], [552, 435], [97, 99], [379, 413], [375, 409], [592, 659], [397, 431],
     [733, 550], [407, 148], [304, 327], [586, 598], [322, 409], [481, 351], [72, 127], [366, 434], [97, 116],
     [513, 335], [832, 878], [728, 388], [521, 840], [564, 444], [72, 125], [670, 407], [491, 463], [834, 731],
     [303, 330], [71, 108], [71, 106], [52, 139], [325, 314], [757, 497], [511, 604], [643, 885], [90, 99], [847, 578],
     [335, 371], [293, 388], [85, 97], [212, 177], [278, 614], [654, 260], [111, 56], [232, 544], [318, 314], [86, 94],
     [1005, 840], [393, 816], [481, 336], [290, 232], [418, 526], [83, 157], [129, 90], [566, 682], [49, 132],
     [427, 901], [683, 268], [283, 474], [347, 533], [106, 90], [636, 540], [60, 106], [362, 784], [53, 125],
     [421, 623], [346, 521], [96, 140], [62, 127], [106, 114], [561, 635], [147, 427], [80, 85], [716, 799], [784, 227],
     [1174, 652], [1086, 310], [293, 212], [543, 323], [313, 327], [529, 322], [345, 204], [92, 84], [271, 180],
     [718, 273], [347, 364], [568, 676], [540, 501], [851, 251], [878, 1030], [587, 512], [77, 105], [139, 73],
     [73, 103], [545, 491], [664, 838], [1147, 379], [601, 403], [569, 353], [85, 95], [73, 101], [548, 475],
     [947, 640], [283, 206], [324, 335], [606, 287], [89, 76], [921, 577], [787, 721], [438, 283], [451, 116],
     [830, 866], [570, 847], [828, 562], [257, 419], [845, 505], [60, 141], [105, 51], [586, 577], [1069, 652],
     [635, 854], [286, 317], [319, 463], [390, 344], [142, 76], [266, 298], [90, 95], [832, 807], [946, 838],
     [833, 879], [53, 61], [594, 432], [525, 213], [51, 108], [848, 817], [776, 770], [74, 144], [411, 432], [59, 123],
     [104, 90], [104, 56], [557, 493], [803, 296], [701, 570], [754, 379], [695, 565], [495, 347], [661, 633],
     [639, 397], [818, 816], [588, 335], [680, 875], [412, 414], [532, 340], [334, 574], [706, 281], [784, 749],
     [946, 895], [927, 1081], [736, 962], [457, 513], [758, 529], [107, 51], [62, 104], [567, 425], [869, 714],
     [812, 617], [614, 704], [401, 533], [616, 648], [85, 104], [682, 553], [491, 377], [478, 358], [548, 529],
     [537, 442], [250, 410], [128, 59], [112, 63], [54, 129], [112, 50], [209, 445], [79, 110], [155, 65], [622, 720],
     [744, 792], [513, 832], [351, 388], [353, 421], [886, 653], [99, 149], [413, 460], [949, 886], [381, 294],
     [100, 74], [88, 103], [892, 723], [138, 76], [602, 409], [319, 489], [465, 288], [135, 228], [993, 475],
     [467, 544], [91, 73], [69, 132], [661, 225], [528, 303], [578, 698], [635, 376], [415, 462], [555, 436], [81, 36],
     [309, 336], [804, 458], [519, 476], [521, 657], [201, 259], [841, 513], [670, 263], [438, 423], [347, 244],
     [771, 684], [62, 105], [524, 319], [300, 548], [417, 415], [171, 482], [206, 357], [326, 217], [474, 490],
     [79, 75], [351, 73], [563, 637], [663, 645], [59, 111], [58, 96], [53, 99], [70, 143], [60, 77], [585, 336],
     [460, 540], [403, 467], [474, 521], [91, 69], [704, 883], [142, 68], [102, 66], [131, 77], [749, 508], [510, 322],
     [66, 111], [122, 52], [485, 818], [452, 284], [759, 817], [528, 190], [518, 647], [502, 297], [482, 610],
     [644, 346], [211, 470], [241, 344], [110, 106], [740, 636], [831, 794], [784, 660], [672, 694], [496, 455],
     [107, 100], [820, 706], [265, 306], [106, 151], [706, 1072], [360, 446], [99, 107], [59, 124], [620, 696],
     [596, 644], [516, 161], [717, 204], [818, 1052], [330, 330], [287, 307], [547, 625], [714, 945], [656, 445],
     [76, 105], [167, 320], [658, 287], [365, 348], [284, 193], [1060, 820], [991, 730], [752, 738], [437, 397],
     [354, 358], [820, 764], [443, 460], [103, 43], [61, 104], [738, 821], [55, 87], [362, 311], [87, 115], [77, 134],
     [344, 380], [700, 842], [598, 845], [569, 441], [788, 700], [110, 62], [149, 102], [524, 539], [464, 455],
     [844, 541], [440, 281], [315, 422], [787, 683], [440, 442], [321, 364], [231, 342], [188, 281], [131, 82],
     [482, 158], [296, 167], [98, 75], [93, 110], [1003, 565], [130, 66], [104, 150], [88, 77], [753, 744], [542, 507],
     [137, 68], [644, 1045], [553, 731], [583, 377], [270, 430], [246, 394], [94, 70], [1032, 764], [346, 315],
     [712, 387], [401, 405], [110, 42], [760, 779], [839, 524], [789, 820], [885, 820], [736, 827], [821, 540],
     [439, 832], [776, 578], [872, 909], [472, 785], [397, 216], [120, 128], [50, 104], [776, 589], [713, 459],
     [453, 268], [959, 698], [482, 555], [106, 27], [583, 125], [858, 514], [405, 147], [769, 677], [347, 313],
     [858, 599], [478, 351], [926, 764], [619, 892], [320, 440], [619, 520], [653, 435], [525, 235], [100, 125],
     [54, 37], [68, 99], [584, 385], [560, 708], [90, 49], [122, 86], [53, 128], [108, 54], [617, 611], [104, 67],
     [73, 90], [521, 335], [346, 309], [446, 246], [502, 562], [407, 299], [453, 339], [373, 415], [806, 647],
     [688, 785], [1030, 749], [365, 353], [278, 590], [88, 120], [198, 100], [343, 439], [697, 729], [471, 582],
     [922, 744], [814, 527], [804, 790], [991, 167], [538, 565], [586, 547], [643, 828], [1131, 700], [671, 670],
     [712, 756], [671, 783], [791, 733], [56, 109], [611, 389], [107, 50], [58, 108], [309, 323], [486, 733],
     [541, 442], [430, 233], [524, 41], [419, 713], [1122, 757], [574, 468], [528, 315], [102, 52], [842, 685],
     [103, 22], [512, 494], [108, 77], [677, 322], [52, 127], [384, 383], [937, 794], [1016, 663], [876, 241],
     [810, 866], [759, 404], [585, 460], [150, 137], [990, 287], [700, 587], [327, 314], [613, 338], [697, 584],
     [48, 104], [58, 146], [93, 75], [654, 527], [131, 63], [155, 56], [81, 95], [104, 63], [89, 101], [70, 121],
     [111, 86], [82, 110], [379, 492], [233, 263], [344, 514], [87, 94], [539, 366], [99, 66], [404, 478], [288, 275],
     [907, 763], [913, 891], [650, 609], [942, 702], [381, 402], [719, 660], [273, 419], [121, 151], [812, 599],
     [477, 412], [234, 482], [409, 161], [481, 683], [890, 763], [1046, 792], [283, 369], [267, 410], [680, 703],
     [567, 443], [758, 671], [290, 425], [809, 884], [560, 615], [77, 90], [138, 62], [92, 73], [734, 627], [325, 391],
     [343, 186], [546, 371], [63, 100], [109, 67], [109, 55], [61, 113], [73, 126], [60, 75], [399, 451], [305, 396],
     [765, 559], [547, 336], [346, 333], [646, 313], [245, 332], [434, 454], [464, 370], [303, 191], [283, 309],
     [70, 121], [76, 90], [123, 86], [498, 156], [804, 917], [629, 973], [935, 945], [48, 112], [111, 82], [343, 214],
     [550, 524], [429, 403], [282, 318], [85, 74], [302, 679], [525, 314], [220, 392], [146, 65], [106, 70], [529, 148],
     [182, 326], [930, 801], [905, 616], [68, 118], [93, 74], [496, 426], [843, 242], [669, 841], [782, 603],
     [410, 513], [728, 583], [95, 110], [102, 47], [804, 267], [534, 93], [686, 880], [975, 865], [658, 295],
     [588, 145], [571, 785], [527, 716], [878, 932], [427, 541], [657, 862], [117, 102], [120, 86], [57, 111],
     [721, 811], [998, 932], [547, 792], [926, 502], [884, 606], [512, 325], [371, 423], [484, 361], [687, 765],
     [509, 281], [627, 597], [309, 404], [329, 575], [75, 126], [69, 129], [673, 317], [342, 249], [468, 402],
     [565, 508], [495, 485], [410, 105], [450, 92], [441, 414], [237, 462], [101, 147], [847, 676], [389, 513],
     [711, 454], [551, 575], [663, 249], [393, 185], [897, 856], [273, 485], [427, 766], [100, 64], [786, 876],
     [73, 142], [462, 370], [97, 171], [821, 774], [101, 119], [441, 509], [627, 246], [83, 110], [540, 538], [54, 116],
     [69, 98], [532, 359], [165, 512], [802, 838], [760, 689], [159, 277], [688, 772], [181, 275], [525, 281],
     [66, 114], [384, 295], [643, 736]]
)

# ========================================================================================
#                        开 始 聚 类 和 画 图
# ========================================================================================
model = KMeans(n_clusters=cluster).fit(X)  # 训练模型
label = model.predict(X)

center = model.cluster_centers_
print("聚类后的中心点坐标为: ")
print(center)

print("转换为int类型后的中心点坐标:")
print(center.astype(int))

# 接下来进行可视化, 要想进行可视化, 我们核心就是要调用plt.contour函数画图, 但是它要求传入三个矩阵, 而我们的x1和x2为向量, 预测的值也为向量, 所有我们需要将x1和x2转换为矩阵
# 获取边界范围, 为了产生数据
x1_min, x1_max = np.min(X[:, 0]), np.max(X[:, 0])
x2_min, x2_max = np.min(X[:, 1]), np.max(X[:, 1])

# 生成新的数据, 并调用meshgrid网格搜索函数帮助我们生成矩阵
# 这里根据需求修改
xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, (x1_max - x1_min) / 500),
                       np.arange(x2_min, x2_max, (x2_max - x2_min) / 500))
# 有了新的数据, 我们需要将这些数据输入到分类器获取到结果, 但是因为输入的是矩阵, 我们需要给你将其转换为符合条件的数据
Z = model.predict(np.c_[xx1.ravel(), xx2.ravel()])
# 这个时候得到的是Z还是一个向
Z = Z.reshape(xx1.shape)

plt.figure()
plt.xlim(x1_min, x1_max)
plt.ylim(x2_min, x2_max)
# 分解的时候有背景颜色
plt.pcolormesh(xx1, xx2, Z, cmap=ListedColormap(colors1))

# 画边界线，用的是等高线，所以会有点问题
# plt.contour(xx1, xx2, Z, cmap=ListedColormap(colors1))

# plt.scatter(X[:, 0], X[:, 1], c=label, s=2, marker=".", cmap=ListedColormap('g'))  # 画成同一种颜色
plt.scatter(X[:, 0], X[:, 1], c=label, s=2, marker=".", cmap=ListedColormap(colors2))

plt.scatter(center[:, 0], center[:, 1], c="red", marker="x", cmap=plt.cm.RdYlBu)

# plt.savefig("./聚类后的图片.png")
plt.show()
